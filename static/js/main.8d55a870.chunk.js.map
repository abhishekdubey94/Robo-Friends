{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","robot","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onSearchChange","event","searchfields","target","value","fetch","then","response","json","user","console","log","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"4NAceA,EAZF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GACzB,OACC,yBAAKC,UAAU,oDACd,yBAAKC,IAAI,cAAcC,IAAG,+BAA0BH,EAA1B,cAC1B,yBAAKC,UAAU,MACf,4BAAKH,GACL,2BAAIC,MCOQK,EAZE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAElB,OACC,6BACEA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGV,KAAMS,EAAMT,KAAME,GAAKO,EAAMP,GAAID,MAAOQ,EAAMR,aCMxDW,EAZG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACnB,OACC,yBAAKV,UAAU,OACd,2BAAOA,UAAU,mCACjBW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCEEI,EARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAAEC,SAAS,SAASC,OAAO,kBAAkBC,OAAO,UAC9DJ,EAAMK,WCqBKC,E,kDAvBd,WAAYN,GAAO,IAAD,8BACjB,cAAMA,IACDO,MAAM,CACVC,UAAS,GAHO,E,8DAOAC,EAAMC,GACvBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAKxB,OAAGG,KAAKJ,MAAMC,SACN,+CAEAG,KAAKX,MAAMK,a,GAjBOQ,IAAMC,WCuDnBC,G,wDAhDd,aAAc,IAAD,8BACZ,gBAODC,eAAiB,SAACC,GACjB,EAAKL,SAAS,CAAEM,aAAcD,EAAME,OAAOC,SAP3C,EAAKb,MAAQ,CACZlB,OAAO,GACP6B,aAAa,IAJF,E,gEAYO,IAAD,OAClBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKb,SAAS,CAAEvB,OAAOoC,OACrCC,QAAQC,IAAIhB,KAAKJ,S,+BAGT,IAAD,EAEuBI,KAAKJ,MAA5BlB,EAFA,EAEAA,OAAO6B,EAFP,EAEOA,aAERU,EAAiBvC,EAAOwC,QAAO,SAAAtC,GACpC,OAAOA,EAAMT,KAAKgD,cAAcC,SAASb,EAAaY,kBAEvD,OAAIzC,EAAO2C,OASV,yBAAK/C,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAcgB,KAAKK,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU3B,OAAQuC,OAZpB,6BACA,4C,GA/Bcf,IAAMC,Y,YCKJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,MAEAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLiB,QAAQjB,MAAMA,EAAMuC,a","file":"static/js/main.8d55a870.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name,email,id}) =>{\n\treturn(\n\t\t<div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t\t<img alt=\"photoasdasd\" src={`https://robohash.org/${id}?200x200`}/>\n\t\t\t<div className=\"tc\">\n\t\t\t<h2>{name}</h2>\n\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t)\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots})=>{\n\n\treturn(\n\t\t<div>\n\t\t {robots.map((robot,i)=>{\n\t \t\treturn\t<Card key={i} name={robot.name} id ={robot.id} email={robot.email}/>\n\t\t\t})}\n\t\t</div>\n\t\t);\n\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) =>{\n\treturn(\n\t\t<div className='pa2'>\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue'\n\t\t\ttype='search' \n\t\t\tplaceholder='search robots'\n\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t\t);\n}\n\nexport default SearchBox;","import React from 'react'\n\nconst Scroll = (props)=>{\n\treturn (\n\t\t<div style={{ overflow:'scroll',border:'5px solid black',height:'800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t\t);\n}\n\nexport default Scroll;","import React from 'react'\n\nclass ErrorBoundary extends React.Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\thasError:false\n\t\t};\n\t}\n\n\tcomponentDidCatch(error,info){\n\t\tthis.setState({hasError:true});\n\n\t}\n\n\trender(){\n\t\tif(this.state.hasError){\n\t\t\treturn <h1> Error Occured </h1>\n\t\t}else{\n\t\t\treturn this.props.children;\n\t\t}\n\t}\n\n\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport './App.css';\n\nclass App extends React.Component {\n\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots:[],\n\t\t\tsearchfields:''\n\t\t}\n\t}\n\n\tonSearchChange = (event)=>{\n\t\tthis.setState({\tsearchfields: event.target.value });\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(user => this.setState({ robots:user}));\n\t\tconsole.log(this.state);\n\t}\n\n\trender(){\n\n\t\tconst {robots,searchfields} = this.state;\n\n\t\tconst filteredRobots = robots.filter(robot=>{\n\t\t\treturn robot.name.toLowerCase().includes(searchfields.toLowerCase());\n\t\t});\n\t\tif(!robots.length){\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t<h1>LOADING</h1>\n\t\t\t\t</div>\n\t\t\t\t);\n\t\t}\n\t\telse{\n\t\t\treturn(\n\t\t\t<div className=\"tc\">\n\t\t\t\t<h1 className=\"f1\">Robofriends</h1>\n\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t</Scroll>\n\t\t\t</div> );\n\t\t}\n\n}\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App'\nimport 'tachyons';\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t\t<App />\n\t\t  ,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}